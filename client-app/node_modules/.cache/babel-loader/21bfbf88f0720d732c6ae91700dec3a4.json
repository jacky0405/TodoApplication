{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  registerSuccessfulLogin(userName, passWord) {\n    let basicAuthHeader = 'Basic ' + window.btoa(username + ':' + password);\n    sessionStorage.setItem(\"authenticatedUser\", userName);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLogin() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n\n    if (user === null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getLoginUserName() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLogin()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/sphwn/eclipse-workspace/demo/src/main/resources/client-app/src/component/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","registerSuccessfulLogin","userName","passWord","basicAuthHeader","window","btoa","username","password","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLogin","user","getItem","getLoginUserName","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,uBAAuB,CAACC,QAAD,EAAWC,QAAX,EAAoB;AACvC,QAAIC,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYC,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CR,QAA5C;AACA,SAAKS,sBAAL,CAA4BP,eAA5B;AACH;;AAEDQ,EAAAA,MAAM,GAAE;AACJH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,WAAW,GAAE;AACT,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAiB;AACb,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAEDE,EAAAA,gBAAgB,GAAE;AACd,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAkB,OAAO,EAAP;AAClB,WAAOA,IAAP;AAEH;;AAEDJ,EAAAA,sBAAsB,CAACP,eAAD,EAAiB;AAEnCL,IAAAA,KAAK,CAACmB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKP,WAAL,EAAH,EAAsB;AAClBO,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BnB,eAA/B;AACH;;AACD,aAAOiB,MAAP;AACH,KANL;AAQH;;AApCuB;;AAuC5B,eAAe,IAAIrB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\nclass AuthenticationService {\r\n    registerSuccessfulLogin(userName, passWord){\r\n        let basicAuthHeader = 'Basic ' + window.btoa(username + ':' + password);\r\n        sessionStorage.setItem(\"authenticatedUser\", userName);\r\n        this.setupAxiosInterceptors(basicAuthHeader);\r\n    }\r\n\r\n    logout(){\r\n        sessionStorage.removeItem(\"authenticatedUser\");\r\n    }\r\n\r\n    isUserLogin(){\r\n        let user = sessionStorage.getItem(\"authenticatedUser\");\r\n        if(user === null){\r\n            return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getLoginUserName(){\r\n        let user = sessionStorage.getItem(\"authenticatedUser\");\r\n        if(user === null) return ''\r\n        return user;\r\n           \r\n    }\r\n\r\n    setupAxiosInterceptors(basicAuthHeader){\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(this.isUserLogin()){\r\n                    config.headers.authorization = basicAuthHeader;\r\n                }\r\n                return config;\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}