{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/basicauth', {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post('http://localhost:8080/authenticate', {\n      \"username\": username,\n      \"password\": password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + ':' + password);\n  }\n\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(this.createJwtToken(token));\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLogin() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n\n    if (user === null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getLoginUserName() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLogin()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/sphwn/eclipse-workspace/demo/src/main/resources/client-app/src/component/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","post","window","btoa","createJwtToken","token","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginForJwt","logout","removeItem","isUserLogin","user","getItem","getLoginUserName","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAoB;AACjD,WAAOJ,KAAK,CAACK,GAAN,CAAU,iCAAV,EAA6C;AAACC,MAAAA,OAAO,EAAC;AAACC,QAAAA,aAAa,EAAC,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAf;AAAT,KAA7C,CAAP;AACH;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAoB;AAC/C,WAAOJ,KAAK,CAACU,IAAN,CAAW,oCAAX,EAAiD;AACpD,kBAAYP,QADwC;AAEpD,kBAAYC;AAFwC,KAAjD,CAAP;AAIH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAoB;AACpC,WAAO,WAAWO,MAAM,CAACC,IAAP,CAAYT,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDS,EAAAA,cAAc,CAACC,KAAD,EAAO;AACjB,WAAO,YAAYA,KAAnB;AACH;;AAEDC,EAAAA,uBAAuB,CAACZ,QAAD,EAAWC,QAAX,EAAoB;AACvCY,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4Cd,QAA5C;AACA,SAAKe,sBAAL,CAA4B,KAAKV,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDe,EAAAA,6BAA6B,CAAChB,QAAD,EAAWW,KAAX,EAAiB;AAC1CE,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4Cd,QAA5C;AACA,SAAKe,sBAAL,CAA4B,KAAKL,cAAL,CAAoBC,KAApB,CAA5B;AACH;;AAEDM,EAAAA,MAAM,GAAE;AACJJ,IAAAA,cAAc,CAACK,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,WAAW,GAAE;AACT,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,mBAAvB,CAAX;;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAiB;AACb,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAEDE,EAAAA,gBAAgB,GAAE;AACd,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAkB,OAAO,EAAP;AAClB,WAAOA,IAAP;AAEH;;AAEDL,EAAAA,sBAAsB,CAACJ,KAAD,EAAO;AAEzBd,IAAAA,KAAK,CAAC0B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKP,WAAL,EAAH,EAAsB;AAClBO,QAAAA,MAAM,CAACvB,OAAP,CAAeC,aAAf,GAA+BO,KAA/B;AACH;;AACD,aAAOe,MAAP;AACH,KANL;AAQH;;AA5DuB;;AA+D5B,eAAe,IAAI5B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\nclass AuthenticationService {\r\n\r\n    executeBasicAuthenticationService(username, password){\r\n        return axios.get('http://localhost:8080/basicauth', {headers:{authorization:this.createBasicAuthToken(username, password)}})\r\n    }\r\n\r\n    executeJwtAuthenticationService(username, password){\r\n        return axios.post('http://localhost:8080/authenticate', {\r\n            \"username\": username,\r\n            \"password\": password\r\n        })\r\n    }\r\n\r\n    createBasicAuthToken(username, password){\r\n        return 'Basic ' + window.btoa(username + ':' + password);\r\n    }\r\n\r\n    createJwtToken(token){\r\n        return 'Bearer ' + token;\r\n    }\r\n\r\n    registerSuccessfulLogin(username, password){\r\n        sessionStorage.setItem(\"authenticatedUser\", username);\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(username, token){\r\n        sessionStorage.setItem(\"authenticatedUser\", username);\r\n        this.setupAxiosInterceptors(this.createJwtToken(token));\r\n    }\r\n\r\n    logout(){\r\n        sessionStorage.removeItem(\"authenticatedUser\");\r\n    }\r\n\r\n    isUserLogin(){\r\n        let user = sessionStorage.getItem(\"authenticatedUser\");\r\n        if(user === null){\r\n            return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getLoginUserName(){\r\n        let user = sessionStorage.getItem(\"authenticatedUser\");\r\n        if(user === null) return ''\r\n        return user;\r\n           \r\n    }\r\n\r\n    setupAxiosInterceptors(token){\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(this.isUserLogin()){\r\n                    config.headers.authorization = token;\r\n                }\r\n                return config;\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}